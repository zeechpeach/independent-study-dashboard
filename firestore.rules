rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() { return request.auth != null; }
    function userDoc() { return get(/databases/$(database)/documents/users/$(request.auth.uid)); }
    function isAdmin() { return isSignedIn() && userDoc().data.isAdmin == true; }
    function isAdvisor() { return isSignedIn() && userDoc().data.userType == 'advisor'; }
    
    // Student assigned to advisor check (optional; fallback to UI filtering)
    // Requires each student user doc to store advisorId or advisors array of IDs
    function hasAdvisor(advisorId) {
      return advisorId == null || // global dates
             (advisorId == request.auth.uid) || // own advisor dates
             (advisorId in userDoc().data.advisors) || // multi-advisor assignment
             (userDoc().data.advisorId == advisorId); // single advisor assignment
    }
    
    // Users collection - allow read access for authenticated users, write for admins and self
    match /users/{userId} {
      allow read: if isSignedIn();
      allow write: if isAdmin() || request.auth.uid == userId;
    }
    
    // Important dates collection
    match /importantDates/{dateId} {
      allow read: if isSignedIn() && (isAdmin() || hasAdvisor(resource.data.advisorId));
      allow create: if isAdmin() || (isAdvisor() && request.resource.data.advisorId == request.auth.uid);
      allow update, delete: if isAdmin() || (isAdvisor() && resource.data.advisorId == request.auth.uid);
    }
    
    // Meetings collection - students need CRUD for their own meetings, advisors can read
    match /meetings/{meetingId} {
      allow read: if isSignedIn() && (isAdmin() || resource.data.studentId == request.auth.uid || isAdvisor());
      allow write: if isSignedIn() && (isAdmin() || resource.data.studentId == request.auth.uid);
    }
    
    // Reflections collection - students need CRUD for their own reflections, advisors can read their students'
    match /reflections/{reflectionId} {
      allow read: if isSignedIn() && (isAdmin() || resource.data.userId == request.auth.uid || isAdvisor());
      allow write: if isSignedIn() && (isAdmin() || resource.data.userId == request.auth.uid);
    }
    
    // Goals collection - students need CRUD for their own goals, advisors can read their students'
    match /goals/{goalId} {
      allow read: if isSignedIn() && (isAdmin() || resource.data.userId == request.auth.uid || isAdvisor());
      allow write: if isSignedIn() && (isAdmin() || resource.data.userId == request.auth.uid);
    }
    
    // Advisor pathways collection - advisors need read/write for their own pathways
    match /advisor_pathways/{pathwayId} {
      allow read: if isSignedIn();
      allow write: if isAdmin() || (isAdvisor() && resource.data.advisor_id == request.auth.uid);
    }
    
    // Calendly events and related collections - allow access for authenticated users
    match /calendly_events/{eventId} {
      allow read, write: if isSignedIn();
    }
    
    // Any other collections - restrict to admins only for security
    match /{document=**} {
      allow read, write: if isAdmin();
    }
  }
}